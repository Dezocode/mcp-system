# MCP Tools Standards Configuration
# This file defines the standard structure and requirements for MCP servers

required_files:
  - "src/main.py"
  - "README.md" 
  - "pyproject.toml"
  - ".env.example"

recommended_files:
  - "tests/test_server.py"
  - "Dockerfile"
  - "docker-compose.yml"

required_directories:
  - "src"
  - "tests"

file_templates:
  main_py: |
    #!/usr/bin/env python3
    """
    {{server_name}} - MCP Server
    Generated using MCP Tools standardized template
    """
    
    import asyncio
    import logging
    from mcp.server.fastmcp import FastMCP
    
    # Configure logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    # Create the MCP server
    mcp = FastMCP("{{server_name}}")
    
    @mcp.tool()
    def hello_world(name: str = "World") -> str:
        """Say hello to someone"""
        return f"Hello, {name}! This is {{server_name}} MCP Server."
    
    async def main():
        """Main entry point"""
        try:
            async with mcp.run_server() as server:
                await server.serve()
        except KeyboardInterrupt:
            logger.info("Server shutdown requested")
        except Exception as e:
            logger.error(f"Server error: {e}")
    
    if __name__ == "__main__":
        asyncio.run(main())

  readme_md: |
    # {{server_name}} MCP Server
    
    ## Overview
    
    {{server_name}} is an MCP (Model Context Protocol) server that provides [describe functionality].
    
    ## Installation
    
    ```bash
    cd mcp-tools/{{server_name}}
    pip install -e .
    ```
    
    ## Usage
    
    ### As MCP Server
    
    Add to your MCP client configuration:
    
    ```json
    {
      "{{server_name}}": {
        "command": "python",
        "args": ["src/main.py"],
        "cwd": "mcp-tools/{{server_name}}"
      }
    }
    ```
    
    ## License
    
    MIT License - see LICENSE file for details

  pyproject_toml: |
    [build-system]
    requires = ["hatchling"]
    build-backend = "hatchling.build"
    
    [project]
    name = "{{server_name}}"
    version = "1.0.0"
    description = "MCP Server - {{server_name}}"
    dependencies = [
        "mcp>=1.0.0",
        "fastmcp>=0.1.0",
    ]
    
    [project.optional-dependencies]
    dev = [
        "pytest>=7.4.0",
        "pytest-asyncio>=0.21.0",
        "black>=23.9.0",
        "isort>=5.12.0",
    ]

naming_conventions:
  server_directory: "kebab-case"  # my-server-name
  file_names: "snake_case"       # my_file.py
  function_names: "snake_case"   # my_function()
  class_names: "PascalCase"      # MyClass

validation_rules:
  max_server_name_length: 50
  allowed_characters: "a-z0-9-"
  required_main_imports: 
    - "mcp"
  required_project_fields:
    - "name"
    - "version" 
    - "dependencies"

watchdog_settings:
  monitor_extensions: [".py", ".toml", ".md", ".json", ".yml", ".yaml"]
  ignore_patterns: 
    - "__pycache__"
    - "*.pyc"
    - ".git"
    - ".env"
    - "node_modules"
  log_level: "INFO"
  validation_delay: 1  # seconds to wait after file changes before validation