#!/bin/bash
# MCP Claude Pipeline - Enhanced with Web Search & Usage Tracking
# Complete linting ‚Üí quality patching ‚Üí development branch publishing
# Claude operates as active worker with real-time guardrail validation
# üîí DELETION PROTECTED - Use ./pipeline-security.sh to manage

# DELETION PROTECTION SYSTEM
SCRIPT_PATH="$(realpath "$0")"
SCRIPT_NAME="$(basename "$0")"

# Function to verify deletion attempt and require password
verify_deletion_attempt() {
    if [[ "$0" == *"rm"* ]] || [[ "$1" == "--delete" ]] || [[ "$1" == "--remove" ]]; then
        echo "üö® DELETION PROTECTION ACTIVATED"
        echo "================================================================="
        echo "‚ùå Attempting to delete protected pipeline file: $SCRIPT_NAME"
        echo "üîí This file is critical to the MCP system operation"
        echo ""
        echo "To safely manage this file:"
        echo "  ./pipeline-security.sh status    # Check protection status"
        echo "  ./pipeline-security.sh unprotect # Remove protection (requires password)"
        echo ""
        echo "üõ°Ô∏è Deletion blocked for security"
        echo "================================================================="
        exit 1
    fi
}

# Check for deletion attempts
verify_deletion_attempt "$@"

# Verify file integrity on execution
if [[ -f ".pipeline-security/monitor.sh" ]]; then
    ./.pipeline-security/monitor.sh 2>/dev/null
fi

# USAGE TRACKING SYSTEM
USAGE_DIR=".mcp-usage-tracking"
USAGE_FILE="${USAGE_DIR}/pipeline-usage.log"
CURRENT_TIME=$(date +%s)

# Initialize usage tracking
mkdir -p "${USAGE_DIR}"
touch "${USAGE_FILE}"

# Check usage in last 3 minutes (180 seconds)
check_usage_frequency() {
    local three_minutes_ago=$((CURRENT_TIME - 180))
    local recent_runs=$(awk -v cutoff="$three_minutes_ago" '$1 >= cutoff' "${USAGE_FILE}" | wc -l)
    
    if [[ $recent_runs -ge 3 ]]; then
        echo ""
        echo "‚ö†Ô∏è  HIGH FREQUENCY USAGE DETECTED"
        echo "================================================================="
        echo "üïê Pipeline has been run ${recent_runs} times in the last 3 minutes"
        echo "ü§ñ Consider running in background for continuous processing:"
        echo "   nohup ./run-pipeline --claude-mode > pipeline.log 2>&1 &"
        echo "================================================================="
        echo ""
    fi
    
    # Log this run
    echo "${CURRENT_TIME} $(date)" >> "${USAGE_FILE}"
    
    # Clean old entries (older than 1 hour)
    local one_hour_ago=$((CURRENT_TIME - 3600))
    awk -v cutoff="$one_hour_ago" '$1 >= cutoff' "${USAGE_FILE}" > "${USAGE_FILE}.tmp"
    mv "${USAGE_FILE}.tmp" "${USAGE_FILE}"
}

# WEB SEARCH CAPABILITY SETUP
setup_web_search() {
    echo "üåê ENHANCED WEB SEARCH CAPABILITY ACTIVATED"
    echo "================================================================="
    echo "üîç Claude now has access to:"
    echo "   ‚Ä¢ Real-time web search for latest documentation"
    echo "   ‚Ä¢ Code examples and best practices lookup"
    echo "   ‚Ä¢ Error resolution and troubleshooting guides"
    echo "   ‚Ä¢ Latest MCP protocol updates and changes"
    echo ""
    echo "üí° Web search integration enables:"
    echo "   ‚úÖ Dynamic problem solving with current information"
    echo "   ‚úÖ Access to latest Python/MCP best practices"
    echo "   ‚úÖ Real-time error pattern matching"
    echo "   ‚úÖ Community solutions for complex issues"
    echo "================================================================="
    echo ""
}

# CLAUDE INTEGRATION GUARDRAILS
display_claude_guardrails() {
    echo "üö®üö®üö® CLAUDE CLI DIRECT GUARDRAIL INSTRUCTIONS üö®üö®üö®"
    echo "================================================================="
    echo "üìã MANDATORY ACTIONS - YOU MUST DO THESE NOW:"
    echo ""
    echo "1Ô∏è‚É£ IMMEDIATELY run quality patcher in background:"
    echo "   python3 scripts/claude_quality_patcher.py --claude-agent --max-fixes 10 --fresh-report"
    echo ""
    echo "2Ô∏è‚É£ CONTINUOUSLY run linter to verify progress:"
    echo "   python3 scripts/version_keeper.py --comprehensive-lint --lint-only"
    echo ""
    echo "3Ô∏è‚É£ MANDATE: Continue applying fixes until linter shows 0 errors"
    echo "   - Apply EVERY fix shown by quality patcher"
    echo "   - Use Read tool first, then Edit/MultiEdit tools"
    echo "   - After each batch, run linter to check progress"
    echo "   - DO NOT STOP until ALL issues are resolved"
    echo ""
    echo "4Ô∏è‚É£ WEB SEARCH ENHANCED: Research solutions when stuck"
    echo "   - Search for Python best practices and error solutions"
    echo "   - Look up MCP protocol documentation when needed"
    echo "   - Find community solutions for complex linting issues"
    echo ""
    echo "5Ô∏è‚É£ Quality patcher will AUTOMATICALLY grab latest session lint"
    echo "   - Each run uses freshest lint report from session"
    echo "   - Validates your changes in real-time"
    echo "   - Creates backups before each fix attempt"
    echo ""
    echo "‚ö° ENFORCEMENT: System tracks if you apply fixes or not"
    echo "üõ°Ô∏è GUARDRAILS: All changes are validated automatically"
    echo "üîÑ CONTINUOUS: Keep running until 0 errors remain"
    echo "üåê WEB SEARCH: Use for research and problem solving"
    echo "================================================================="
    echo ""
}

# PIPELINE FILES INVENTORY
display_pipeline_inventory() {
    echo "üìÅ AVAILABLE PIPELINE FILES FOR CLAUDE"
    echo "================================================================="
    echo "üîß Core Pipeline Components:"
    
    if [[ -f "run-pipeline" ]]; then
        echo "   ‚úÖ run-pipeline - Main execution script ($(wc -c < run-pipeline) bytes)"
    fi
    
    if [[ -f "run-direct-pipeline" ]]; then
        echo "   ‚úÖ run-direct-pipeline - Direct execution script ($(wc -c < run-direct-pipeline) bytes)"
    fi
    
    if [[ -f "mcp-claude-pipeline.py" ]]; then
        echo "   ‚úÖ mcp-claude-pipeline.py - Master orchestrator ($(wc -c < mcp-claude-pipeline.py) bytes)"
    fi
    
    echo ""
    echo "üêç Python Components:"
    for file in mcp-*.py auto-discovery-system.py; do
        if [[ -f "$file" ]]; then
            echo "   ‚úÖ $file ($(wc -c < "$file") bytes)"
        fi
    done
    
    echo ""
    echo "üìú Script Tools:"
    if [[ -d "scripts" ]]; then
        for script in scripts/*.py; do
            if [[ -f "$script" ]]; then
                echo "   ‚úÖ $(basename "$script") ($(wc -c < "$script") bytes)"
            fi
        done
    fi
    
    echo ""
    echo "‚öôÔ∏è Configuration & Security:"
    for config in requirements.txt .flake8 pipeline-security.sh; do
        if [[ -f "$config" ]]; then
            echo "   ‚úÖ $config ($(wc -c < "$config") bytes)"
        fi
    done
    
    echo ""
    echo "üìÇ Directories Available:"
    for dir in configs installers utils docs; do
        if [[ -d "$dir" ]]; then
            local file_count=$(find "$dir" -type f | wc -l)
            echo "   üìÅ $dir/ ($file_count files)"
        fi
    done
    
    echo "================================================================="
    echo ""
}

# STRICT GUARDRAILS SYSTEM
enforce_strict_guardrails() {
    echo "üõ°Ô∏è STRICT GUARDRAILS ENFORCEMENT ACTIVE"
    echo "================================================================="
    echo "üö® MANDATORY COMPLIANCE REQUIREMENTS:"
    echo ""
    echo "‚úÖ NO FILE CREATION: Only edit existing files unless critical"
    echo "‚úÖ READ FIRST: Always use Read tool before Edit/MultiEdit"
    echo "‚úÖ BACKUP SAFETY: All changes automatically backed up"
    echo "‚úÖ VALIDATION: Every change validated by quality patcher"
    echo "‚úÖ PROGRESS TRACKING: Continuous lint monitoring required"
    echo "‚úÖ WEB RESEARCH: Use search for complex problem solving"
    echo ""
    echo "‚ùå PROHIBITED ACTIONS:"
    echo "   ‚õî Creating unnecessary files or documentation"
    echo "   ‚õî Ignoring linter errors or quality issues"
    echo "   ‚õî Making changes without validation"
    echo "   ‚õî Stopping before all issues are resolved"
    echo ""
    echo "üéØ SUCCESS CRITERIA: 0 linter errors, validated pipeline"
    echo "================================================================="
    echo ""
}

# BACKGROUND EXECUTION PROMPT
prompt_background_execution() {
    echo "üöÄ CLAUDE BACKGROUND EXECUTION RECOMMENDATION"
    echo "================================================================="
    echo "üí° For optimal performance, consider running in background:"
    echo ""
    echo "   # Start pipeline in background with full logging"
    echo "   nohup ./run-pipeline --claude-mode > pipeline-$(date +%Y%m%d_%H%M%S).log 2>&1 &"
    echo ""
    echo "   # Monitor progress"
    echo "   tail -f pipeline-*.log"
    echo ""
    echo "   # Check running processes"
    echo "   ps aux | grep run-pipeline"
    echo ""
    echo "üîÑ Background execution enables:"
    echo "   ‚úÖ Continuous processing without interruption"
    echo "   ‚úÖ Session persistence across terminal sessions"
    echo "   ‚úÖ Complete logging for troubleshooting"
    echo "   ‚úÖ Resource efficient operation"
    echo "================================================================="
    echo ""
}

# Generate session ID with timestamp
SESSION_ID="session_$(date +%Y%m%d_%H%M%S)"
SESSION_DIR="pipeline-outputs/sessions/${SESSION_ID}"

echo "üöÄ MCP CLAUDE PIPELINE - ENHANCED CONTINUOUS EXECUTION"
echo "================================================================="
echo ""

# Execute all new features
check_usage_frequency
setup_web_search
display_pipeline_inventory
display_claude_guardrails
enforce_strict_guardrails
prompt_background_execution

echo "üì¶ Executing complete pipeline with all components coordinated"
echo "ü§ñ Claude operates as active worker with real-time guardrail system" 
echo "üõ°Ô∏è Quality patcher provides continuous validation and backup management"
echo "üîÑ Pipeline runs continuously until ALL issues are resolved"
echo "üåê Web search capability active for enhanced problem solving"
echo "üìÇ Session ID: ${SESSION_ID}"
echo "üìÅ Output Directory: ${SESSION_DIR}"
echo ""

# Create session-specific directory structure
echo "üìÅ Creating session directory structure..."
mkdir -p "${SESSION_DIR}"/{lint,quality,pipeline,logs,artifacts}
echo "‚úÖ Session directories created"

# Ensure we're in the right directory
if [[ ! -f "mcp-claude-pipeline.py" ]]; then
    echo "‚ùå Error: mcp-claude-pipeline.py not found in current directory"
    echo "   Please run from the MCP system root directory"
    exit 1
fi

# Check Python 3 availability
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Error: python3 not found"
    echo "   Please install Python 3.8+ to run the pipeline"
    exit 1
fi

# Export session info for the pipeline to use
export MCP_SESSION_ID="${SESSION_ID}"
export MCP_SESSION_DIR="${SESSION_DIR}"
export MCP_WEB_SEARCH_ENABLED="true"

# Set continuous execution parameters
CONTINUOUS_PARAMS="--continuous-mode --non-interactive --max-cycles=999 --target-issues=0 --publish-pipeline"

# Check for Claude mode flag to enable minimal output
CLAUDE_MODE=""
for arg in "$@"; do
    if [[ "$arg" == "--claude-mode" ]]; then
        CLAUDE_MODE="--claude-mode"
        echo "ü§ñ CLAUDE MODE ENABLED - Minimal output for speed"
        break
    fi
done

# Execute the master orchestrator with continuous parameters
echo "üî• Starting master orchestrator in CONTINUOUS MODE..."
echo "üéØ Parameters: ${CONTINUOUS_PARAMS}"
echo "üõ°Ô∏è Quality patcher guardrail system will monitor ALL file changes"
echo "‚ö° Pipeline will run until ALL issues are resolved"
echo "üåê Web search capability enabled for enhanced problem solving"
echo ""
echo "üö® CLAUDE INTEGRATION ACTIVE"
echo "üìã When fixes are shown, use Read tool then Edit/MultiEdit tools to apply them"
echo "üîç Use web search for research when encountering complex issues"
echo "üîÑ Pipeline will validate your changes automatically and continue"
echo ""

# Force non-buffered output for real-time monitoring
export PYTHONUNBUFFERED=1

# Execute with continuous parameters - this runs until ALL issues are resolved
python3 mcp-claude-pipeline.py --session-dir="${SESSION_DIR}" ${CONTINUOUS_PARAMS} ${CLAUDE_MODE} "$@"

# Check result
PIPELINE_EXIT_CODE=$?
if [[ $PIPELINE_EXIT_CODE -eq 0 ]]; then
    echo ""
    echo "üéâ CONTINUOUS PIPELINE EXECUTION SUCCESSFUL!"
    echo "‚úÖ ALL ISSUES RESOLVED - Zero issues remaining"
    echo "üöÄ Development branch published and ready for testing"
    echo "üìä Session results saved to: ${SESSION_DIR}"
    echo "üìã Comprehensive final report available in session directory"
    echo "üéØ Pipeline achieved target: 0 issues remaining"
    echo "üåê Web search capability utilized for enhanced problem solving"
else
    echo ""
    echo "‚ùå CONTINUOUS PIPELINE EXECUTION INCOMPLETE"
    echo "‚ö†Ô∏è  Pipeline may have encountered issues during continuous processing"
    echo "üîç Session logs saved to: ${SESSION_DIR}/logs/"
    echo "üìÅ Check session directory for troubleshooting: ${SESSION_DIR}"
    echo "üîÑ Pipeline will retry automatically - Claude integration may be needed"
    echo "üåê Consider using web search for researching complex issues"
    echo "üí° Check CLAUDE_PIPELINE_INTEGRATION.md for guidance"
fi

echo ""
echo "üìÇ Session Directory Structure:"
echo "   ${SESSION_DIR}/"
echo "   ‚îú‚îÄ‚îÄ lint/          # Lint reports and analysis"
echo "   ‚îú‚îÄ‚îÄ quality/       # Quality patches and fixes"
echo "   ‚îú‚îÄ‚îÄ pipeline/      # Pipeline execution reports"
echo "   ‚îú‚îÄ‚îÄ logs/          # Execution logs"
echo "   ‚îî‚îÄ‚îÄ artifacts/     # Additional artifacts"
echo ""
echo "üìä Usage Tracking: Run frequency monitored for optimization"
echo "üåê Web Search: Enabled for enhanced problem-solving capabilities"
echo ""

exit $PIPELINE_EXIT_CODE