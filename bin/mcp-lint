#!/usr/bin/env bash
#
# MCP Lint - Convenient wrapper for MCP version keeper linting
# 
# Usage:
#   mcp-lint                    # Quick lint check
#   mcp-lint --full             # Comprehensive linting
#   mcp-lint --debug            # Debug mode
#   mcp-lint --json OUTPUT      # JSON output
#   mcp-lint --help             # Show help
#

set -euo pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Default options
DEBUG=false
FULL=false
JSON_OUTPUT=""
QUICK=true

# Help text
show_help() {
    cat << EOF
MCP Lint - Convenient wrapper for MCP version keeper linting

USAGE:
    mcp-lint [OPTIONS]

OPTIONS:
    --full              Run comprehensive linting (slower but more thorough)
    --debug             Enable debug mode with verbose output
    --json OUTPUT       Save results to JSON file
    --quick             Quick lint check (default)
    --help              Show this help message

EXAMPLES:
    mcp-lint                               # Quick lint check
    mcp-lint --full --debug                # Full lint with debug output
    mcp-lint --json results.json           # Save results to JSON
    mcp-lint --full --json pipeline.json   # Full lint + JSON for pipeline

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --full)
            FULL=true
            QUICK=false
            shift
            ;;
        --debug)
            DEBUG=true
            shift
            ;;
        --json)
            JSON_OUTPUT="$2"
            shift 2
            ;;
        --quick)
            QUICK=true
            FULL=false
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}Error: Unknown option $1${NC}" >&2
            echo "Use --help for usage information" >&2
            exit 1
            ;;
    esac
done

# Build command arguments
ARGS=()

if [[ "$FULL" == "true" ]]; then
    ARGS+=(--comprehensive-lint)
    echo -e "${BLUE}üîç Running comprehensive linting...${NC}"
elif [[ "$QUICK" == "true" ]]; then
    ARGS+=(--quick-check --real-issues-only)
    echo -e "${BLUE}‚ö° Running quick lint check...${NC}"
fi

if [[ "$DEBUG" == "true" ]]; then
    ARGS+=(--debug)
fi

ARGS+=(--lint-only)

if [[ -n "$JSON_OUTPUT" ]]; then
    ARGS+=(--output-format=json --output-file="$JSON_OUTPUT")
    echo -e "${BLUE}üìÑ Results will be saved to: $JSON_OUTPUT${NC}"
fi

# Change to project directory
cd "$PROJECT_ROOT"

# Set Python path and run
export PYTHONPATH="$PROJECT_ROOT"

echo -e "${BLUE}üìÅ Project: $PROJECT_ROOT${NC}"
echo ""

# Run the command
if python3 scripts/version_keeper.py "${ARGS[@]}"; then
    echo ""
    echo -e "${GREEN}‚úÖ Linting completed successfully${NC}"
    
    if [[ -n "$JSON_OUTPUT" && -f "$JSON_OUTPUT" ]]; then
        echo -e "${GREEN}üìÑ Results saved to: $JSON_OUTPUT${NC}"
    fi
    
    exit 0
else
    echo ""
    echo -e "${RED}‚ùå Linting failed${NC}"
    exit 1
fi