#!/usr/bin/env bash

# üìã END-TO-END SOP COMPLIANCE CHECKER
# Verifies compliance with project structure, patterns, and SOP requirements

PROJECT_DIR="${1:-$(pwd)}"

echo "üìã END-TO-END SOP COMPLIANCE CHECKER"
echo "üìÅ Project Directory: $PROJECT_DIR"
echo ""

cd "$PROJECT_DIR" || {
    echo "‚ùå Cannot access project directory: $PROJECT_DIR"
    exit 1
}

# Phase 1: File Structure Compliance
echo "üîç PHASE 1: FILE STRUCTURE COMPLIANCE"
echo ""

# Check for essential project files
ESSENTIAL_FILES=(
    "package.json"
    "main.js"
    "src/"
    "public/"
)

STRUCTURE_VIOLATIONS=0

echo "‚úÖ Checking essential project structure:"
for file in "${ESSENTIAL_FILES[@]}"; do
    if [[ -e "$file" ]]; then
        echo "   ‚úÖ $file exists"
    else
        echo "   ‚ùå $file MISSING"
        STRUCTURE_VIOLATIONS=$((STRUCTURE_VIOLATIONS + 1))
    fi
done

# Phase 2: Pattern Compliance
echo ""
echo "üîç PHASE 2: ESTABLISHED PATTERN COMPLIANCE"
echo ""

# Check for proper module loading order
echo "üîç Checking module loading patterns:"

if [[ -f "main.js" ]]; then
    echo "   üìÑ Analyzing main.js module loading..."
    
    # Check for proper require/import order
    REQUIRES_COUNT=$(grep -c "require(" main.js 2>/dev/null || echo "0")
    IMPORTS_COUNT=$(grep -c "import.*from" main.js 2>/dev/null || echo "0")
    
    echo "   üìä Module loading stats:"
    echo "      ‚Ä¢ require() statements: $REQUIRES_COUNT"
    echo "      ‚Ä¢ import statements: $IMPORTS_COUNT"
    
    if [[ "$REQUIRES_COUNT" -gt 0 && "$IMPORTS_COUNT" -gt 0 ]]; then
        echo "   ‚ö†Ô∏è  Mixed module loading detected (require + import)"
    fi
fi

# Phase 3: Security Pattern Compliance
echo ""
echo "üîç PHASE 3: SECURITY PATTERN COMPLIANCE"
echo ""

# Check for execute_script violations (from CLAUDE.md history)
EXECUTE_SCRIPT_COUNT=$(find . -name "*.js" -not -path "*/node_modules/*" -exec grep -c "execute_script\|executeScript" {} \; | awk '{sum += $1} END {print sum}')

if [[ "$EXECUTE_SCRIPT_COUNT" -gt 0 ]]; then
    echo "   ‚ùå SECURITY VIOLATION: $EXECUTE_SCRIPT_COUNT execute_script usages found"
    echo "   üö® CLAUDE.md history shows this causes security architecture destruction"
    echo "   üìã Must use ActionChains-only approach"
else
    echo "   ‚úÖ No execute_script violations found"
fi

# Check for proper ActionChains usage
ACTIONCHAINS_COUNT=$(find . -name "*.js" -not -path "*/node_modules/*" -exec grep -c "ActionChains\|action_chain" {} \; | awk '{sum += $1} END {print sum}')

if [[ "$ACTIONCHAINS_COUNT" -gt 0 ]]; then
    echo "   ‚úÖ ActionChains usage found: $ACTIONCHAINS_COUNT instances"
else
    echo "   ‚ö†Ô∏è  No ActionChains usage detected"
fi

# Phase 4: Functionality Compliance
echo ""
echo "üîç PHASE 4: FUNCTIONALITY COMPLIANCE"
echo ""

# Check for proper error handling
echo "üîç Error handling patterns:"

ERROR_HANDLERS=$(find . -name "*.js" -not -path "*/node_modules/*" -exec grep -c "try\|catch\|process\.on.*error" {} \; | awk '{sum += $1} END {print sum}')
echo "   üìä Error handling blocks: $ERROR_HANDLERS"

# Check for proper IPC handlers
IPC_HANDLERS=$(find . -name "*.js" -not -path "*/node_modules/*" -exec grep -c "ipcMain\.handle\|ipcRenderer\.invoke" {} \; | awk '{sum += $1} END {print sum}')
echo "   üìä IPC handlers: $IPC_HANDLERS"

# Phase 5: Documentation Compliance
echo ""
echo "üîç PHASE 5: DOCUMENTATION COMPLIANCE"
echo ""

# Check for CLAUDE.md compliance
if [[ -f "CLAUDE.md" ]]; then
    echo "   ‚úÖ CLAUDE.md exists"
    
    # Check for critical sections
    if grep -q "EXTREME CODE QUALITY MANDATE" CLAUDE.md 2>/dev/null; then
        echo "   ‚úÖ Contains code quality mandate"
    else
        echo "   ‚ö†Ô∏è  Missing code quality mandate section"
    fi
else
    echo "   ‚ö†Ô∏è  CLAUDE.md not found"
fi

# Phase 6: Generate Compliance Report
echo ""
echo "üìã END-TO-END SOP COMPLIANCE REPORT"
echo ""

TOTAL_VIOLATIONS=$((STRUCTURE_VIOLATIONS + (EXECUTE_SCRIPT_COUNT > 0 ? 1 : 0)))

echo "üìä COMPLIANCE METRICS:"
echo "   ‚Ä¢ File Structure Violations: $STRUCTURE_VIOLATIONS"
echo "   ‚Ä¢ Security Pattern Violations: $(( EXECUTE_SCRIPT_COUNT > 0 ? 1 : 0 ))"
echo "   ‚Ä¢ Error Handlers: $ERROR_HANDLERS"
echo "   ‚Ä¢ IPC Handlers: $IPC_HANDLERS"
echo "   ‚Ä¢ ActionChains Usage: $ACTIONCHAINS_COUNT"
echo ""

if [[ "$TOTAL_VIOLATIONS" -eq 0 ]]; then
    echo "‚úÖ END-TO-END SOP COMPLIANCE ACHIEVED"
    echo "üéØ Project follows established patterns and security requirements"
else
    echo "‚ùå END-TO-END SOP VIOLATIONS DETECTED"
    echo ""
    echo "üìã REQUIRED AGENT ACTIONS:"
    
    if [[ "$STRUCTURE_VIOLATIONS" -gt 0 ]]; then
        echo "   1. üìÅ Fix file structure violations"
        echo "      ‚Ä¢ Ensure essential files exist"
        echo "      ‚Ä¢ Follow established directory patterns"
    fi
    
    if [[ "$EXECUTE_SCRIPT_COUNT" -gt 0 ]]; then
        echo "   2. üîí Fix security pattern violations"
        echo "      ‚Ä¢ Replace execute_script with ActionChains"
        echo "      ‚Ä¢ Follow pointer-native architecture"
    fi
fi

echo ""
echo "üìã END-TO-END SOP CHECKLIST FOR AGENT:"
echo "   ‚ñ° Essential files exist (package.json, main.js, src/, public/)"
echo "   ‚ñ° Proper module loading patterns maintained"
echo "   ‚ñ° No execute_script security violations"
echo "   ‚ñ° ActionChains used for browser automation"
echo "   ‚ñ° Proper error handling implemented"
echo "   ‚ñ° IPC handlers follow established patterns"
echo "   ‚ñ° Functionality verified after changes"
echo "   ‚ñ° No regressions introduced"
echo ""
echo "üéØ Success criteria: 0 violations, all patterns maintained"