#!/usr/bin/env bash
#
# MCP Fix - Convenient wrapper for Claude Quality Patcher
# 
# Usage:
#   mcp-fix                     # Interactive mode
#   mcp-fix --auto              # Automated fixes  
#   mcp-fix --dry-run           # Show what would be fixed
#   mcp-fix --debug             # Debug mode
#   mcp-fix --help              # Show help
#

set -euo pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Default options
DEBUG=false
AUTO=false
DRY_RUN=false
MAX_FIXES=10
CLAUDE_AGENT=false

# Help text
show_help() {
    cat << EOF
MCP Fix - Convenient wrapper for Claude Quality Patcher

USAGE:
    mcp-fix [OPTIONS]

OPTIONS:
    --auto              Run in automated mode (safe fixes only)
    --dry-run           Show what would be fixed without applying changes
    --debug             Enable debug mode with verbose output
    --max N             Maximum number of fixes to apply (default: 10)
    --claude-agent      Claude agent mode for manual review
    --fresh             Generate fresh lint report before fixing
    --help              Show this help message

EXAMPLES:
    mcp-fix                        # Interactive mode
    mcp-fix --dry-run              # Preview fixes
    mcp-fix --auto --max 20        # Auto-apply up to 20 fixes
    mcp-fix --claude-agent         # Manual review mode
    mcp-fix --debug --fresh        # Debug with fresh report

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --auto)
            AUTO=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --debug)
            DEBUG=true
            shift
            ;;
        --max)
            MAX_FIXES="$2"
            shift 2
            ;;
        --claude-agent)
            CLAUDE_AGENT=true
            shift
            ;;
        --fresh)
            FRESH=true
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}Error: Unknown option $1${NC}" >&2
            echo "Use --help for usage information" >&2
            exit 1
            ;;
    esac
done

# Build command arguments
ARGS=()

ARGS+=(--max-fixes="$MAX_FIXES")

if [[ "$AUTO" == "true" ]]; then
    ARGS+=(--auto-mode --non-interactive)
    echo -e "${BLUE}ü§ñ Running in automated mode...${NC}"
fi

if [[ "$DRY_RUN" == "true" ]]; then
    ARGS+=(--dry-run)
    echo -e "${BLUE}üîç Dry run mode - no changes will be applied${NC}"
fi

if [[ "$DEBUG" == "true" ]]; then
    ARGS+=(--debug)
fi

if [[ "$CLAUDE_AGENT" == "true" ]]; then
    ARGS+=(--claude-agent --batch-mode)
    echo -e "${BLUE}üë®‚Äçüíª Claude agent mode - manual review${NC}"
fi

if [[ "${FRESH:-false}" == "true" ]]; then
    ARGS+=(--fresh-report)
    echo -e "${BLUE}üÜï Generating fresh lint report...${NC}"
fi

# Change to project directory
cd "$PROJECT_ROOT"

# Set Python path and run
export PYTHONPATH="$PROJECT_ROOT"

echo -e "${BLUE}üìÅ Project: $PROJECT_ROOT${NC}"
echo -e "${BLUE}üîß Max fixes: $MAX_FIXES${NC}"
echo ""

# Run the command
if python scripts/claude_quality_patcher.py "${ARGS[@]}"; then
    echo ""
    echo -e "${GREEN}‚úÖ Quality patching completed successfully${NC}"
    exit 0
else
    echo ""
    echo -e "${RED}‚ùå Quality patching failed${NC}"
    exit 1
fi