name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"

    - name: Lint with black and isort
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/

    - name: Type check with mypy
      run: |
        mypy src/

    - name: Test with pytest
      run: |
        pytest tests/ --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-server postgresql

    - name: Start services
      run: |
        sudo service redis-server start
        sudo service postgresql start

    - name: Install MCP System
      run: |
        chmod +x install.sh
        ./install.sh

    - name: Test installation
      run: |
        export PATH="$HOME/bin:$PATH"
        mcp-universal --help
        mcp-init-project --help

    - name: Test project creation
      run: |
        export PATH="$HOME/bin:$PATH"
        mkdir -p /tmp/test-project
        cd /tmp/test-project
        echo '{"name": "test"}' > package.json
        mcp-init-project

    - name: Test server creation
      run: |
        export PATH="$HOME/bin:$PATH"
        mcp-universal create test-server --template python-fastmcp --port 8055

  docker-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t mcp-system:test .

    - name: Test Docker container
      run: |
        docker run --rm mcp-system:test mcp-universal --help

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt

    - name: Run Bandit security scan
      run: |
        pip install bandit
        # Run bandit and fail CI if security issues are found
        bandit -r src/ -ll
        # Also generate JSON report for artifact upload
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json